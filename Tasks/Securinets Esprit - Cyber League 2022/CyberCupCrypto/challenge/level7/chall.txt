from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCD
import random
import math
from secret import flag

def keygen():
    q = getPrime(1024)
    f = random.randint(2, q-1)
    while True:
        g = random.randint(2, q-1)
        if GCD(f, g) == 1:
            break
    h = (inverse(f, q)*g) % q
    return (q, h), (f, g)

def encrypt(q, h, m):
    r = random.randint(2, int(math.sqrt(q // 2)))
    e = (r*h + m) % q
    return e


def decrypt(q, f, g, e):
    a = (f*e) % q
    m = (a*inverse(f, g)) % g
    return m


public, private = keygen()
q, h = public
f, g = private

m = bytes_to_long(flag)
c = encrypt(q, h, m)

print(f"{q = }")
print(f"{h = }")
print(f"{c = }")

"""
q = 134044725593093431686747029819384161338559921024173777203250543369922739269544918551846351512592741637250522396102594573486396450735685397714858810344967468525583181159553334655429668594346456212620564444885174803965359533172944273813953468981772094535044248862395502952380817799144728873734617944761418665627
h = 106279060020702535881734348704476238416868337174870438796084901359133853244442321436249438942170065388616487599491736674918722764851640306926447852514598894059609180006584552051827211400348997147012011114926850750979561135996212938029888252664897012420198279555241613485196414721238565288925767096406365176294
c = 74362198065173111236533790259453981762790445690623359144910618992974877704729875355058611671105844645486427831442782254491790629881003874567256424163727117129701401707118989771277403097020641411538081629261783911177881857991400674213832700950929175122719506420117828926367514821693425169103696559808877780070
"""
