#!/usr/bin/env python3

"""
Author : msalaani
Task : ALO REVENGE - Solver
Event : Hackfest 7 - Finals

"""

from Crypto.Util.number import long_to_bytes
from sage.all import *

def GeneralizedWienerAttack_1(e, N):
    
    # https://iacr.org/archive/pkc2004/29470001/29470001.pdf

    # 1. Compute continued fractions e / N
    convergents = continued_fraction(ZZ(e) / N).convergents()
    for convergent in convergents:
        k = convergent.numerator()
        x = convergent.denominator()
        if (k != 0):
            # 2.a Compute s, t and p_tild
            s = N + 1 - e*x // k # ~= p + q
            t = s**2 - 4*N # ~= p - q
            if t >= 0:
                if Integer.is_square(t):
                    t = isqrt(t)
                    if (s+t) & 1 == 0:
                        p_tild = (s+t) // 2 # ~= p
                        if N % p_tild == 0 and (1 < p_tild < N): # Direct Solution
                            return int(p_tild), int(N // p_tild)

                        else: # Coppersmith
                            # 2.b apply coppersmith 
                            x_ = PolynomialRing(Zmod(N), "x").gen()
                            B = isqrt(isqrt(N)) # N ^ 1/4
                            f = p_tild + x_
                            for k_ in range(-3, 3):
                                fc = f + (2*k_+1) * B 
                                roots = fc.small_roots(X = B, epsilon = 1/25)
                                if len(roots) != 0:
                                    for p_r in roots:
                                        if N % p_r == 0:
                                            return int(p_r), int(N // p_r)
    return None, None

N = 17467481214893706686264907425568641024423948747329849803220540505711741882994201020419267334275928072135607770718575673054022667436927843534612869038355838282302932843012360269846075834519121085585237145107178495749549229011480099302592862529793499242171139861548764486647255246582991889917183532383901281037265354836389715598698732332650298802320298029920024169247746495789471074526414069145826312205525875992558293413995887407696433079706868923088705553097918630396795662265265029232705666774780685845058275972550787174550565076915144575888017217778363879229208396372829144741676068451625311492986985640257375317727
e = 11510661733340982733533878793120292586274701035726574023994365636079720367695755042806936494388202377353335952217812807329420830261126724301187782770267446596583293374843338814415278559221574584540406875244169151233672317813034143259437127161647942947923778947443773592665041961716793016435657059806554179659743488724617206754844439460403976741455327604855036565353239964435280266533191670611555079321938033966406987626990930623180865750218693144391340719359836202417105909484307998021800093724370797914473472568443918921602072272409292100254645798757930418474790800166734717350991663753306969381902753370423505662795
c = 10734148290191221466909514518368015114801896024316006882039213449697716902012731369475976955595544192543160485970461801112223741628024523764227256093949064484882036589333492155275749792296917971987499208569220668524514612519269610676725703663098152673966136668848958007640574259590090615824782894974145001462339082004683947411740391936961429745215620168352488881630461337238661672358179899120017564007954127116043695370634980013995177849609827571878196472113283293712103838219489455434085449869763535166995255883856737526145809741672872434202007584631509500242928075360153554270293981587343570857211929720743227816263
    
p, q = GeneralizedWienerAttack_1(e, N)
if p and q:
    d = inverse_mod(e, (p-1)*(q-1))
    FLAG = int(pow(c, d, N))

    assert long_to_bytes(FLAG) == b"HACKFEST{2fb8eA6a8BA564276a581a5B51032D5331a7B953C4d2b864a65c2D96Ae9e1947}"
