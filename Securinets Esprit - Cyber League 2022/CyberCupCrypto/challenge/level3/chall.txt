use rand::{Rng,SeedableRng};
use rand::rngs::StdRng;
use std::fs;
use std::io::Write;
use std::time::SystemTime;

fn get_rng() -> StdRng {
    let seed = SystemTime::now()
        .duration_since(SystemTime::UNIX_EPOCH)
        .expect("Time is broken")
        .as_secs();
    return StdRng::seed_from_u64(seed);
}


fn xor(input : Vec<u8>) -> String{
    let mut rng = get_rng();
    return input
        .iter()
        .map(|c| format!("{:02x}", (c ^ rng.gen::<u8>())))
        .collect::<Vec<String>>()
        .join("");
 }

fn main() -> std::io::Result<()> {
    let flag = fs::read("flag.png")?;
    let xored = xor(flag);
    let mut file = fs::File::create("flag.png.enc")?;
    file.write(xored.as_bytes())?;
    Ok(())
}

// https://drive.google.com/file/d/1ZfCjQ3kgKrUHU-rDXqSHGwGjdjVrig_n/view?usp=sharing
